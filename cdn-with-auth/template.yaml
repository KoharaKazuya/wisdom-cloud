AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Protect downloads of your content hosted on CloudFront with Cognito authentication using Lambda@Edge

Parameters:
  RedirectPathSignIn:
    Type: String
    Description: The URL path that should handle the redirect from Cognito after sign-in
    Default: /parseauth
  RedirectPathSignOut:
    Type: String
    Description: The URL path that should handle the redirect from Cognito after sign-out
    Default: /
  RedirectPathAuthRefresh:
    Type: String
    Description: The URL path that should handle the JWT refresh request
    Default: /refreshauth
  SignOutUrl:
    Type: String
    Description: The URL path that you can visit to sign-out
    Default: /signout
  AlternateDomainNames:
    Type: CommaDelimitedList
    Description: "If you intend to use one or more custom domain names for the CloudFront distribution, please set that up yourself on the CloudFront distribution after deployment. If you provide those domain names now (comma-separated) the necessary Cognito configuration will already be done for you. Alternatively, update the Cognito configuration yourself after deployment: add sign in and sign out URLs for your custom domains to the user pool app client settings."
    Default: ""
  CookieSettings:
    Type: String
    Description: The settings for the cookies holding e.g. the JWT's. To be provided as a JSON object, mapping cookie type to setting. Provide the setting for the particular cookie type as a string, e.g. "Path=/; Secure; HttpOnly; Max-Age=1800; SameSite=Lax". If left to null, a default setting will be used.
    Default: >-
      {
        "idToken": null,
        "accessToken": null,
        "refreshToken": null,
        "nonce": null
      }
  OAuthScopes:
    Type: CommaDelimitedList
    Description: The OAuth scopes to request the User Pool to add to the access token JWT
    Default: "phone, email, profile, openid, aws.cognito.signin.user.admin"
  HttpHeaders:
    Type: String
    Description: The HTTP headers to set on all responses from CloudFront. To be provided as a JSON object
    Default: >-
      {
        "Content-Security-Policy": "default-src 'none'; img-src 'self'; script-src 'self' https://code.jquery.com https://stackpath.bootstrapcdn.com; style-src 'self' 'unsafe-inline' https://stackpath.bootstrapcdn.com; object-src 'none'; connect-src 'self' https://*.amazonaws.com https://*.amazoncognito.com",
        "Strict-Transport-Security": "max-age=31536000; includeSubdomains; preload",
        "Referrer-Policy": "same-origin",
        "X-XSS-Protection": "1; mode=block",
        "X-Frame-Options": "DENY",
        "X-Content-Type-Options": "nosniff"
      }
  CookieCompatibility:
    Type: String
    Description: "Specify whether naming of cookies should be compatible with AWS Amplify (default) or Amazon Elasticsearch Service."
    Default: "amplify"
    AllowedValues:
      - "amplify"
      - "elasticsearch"
  AdditionalCookies:
    Type: String
    Description: 'Specify one or more additional cookies to set after successfull sign-in. Specify as a JSON object––mapping cookie names to values and settings: {"cookieName1": "cookieValue1; HttpOnly; Secure"}'
    Default: >-
      {}
  UserPoolArn:
    Type: String
    Description: "Specify the ARN of an existing user pool to use that one instead of creating a new one. If specified, then UserPoolClientId must also be specified. Also, the User Pool should have a domain configured"
    Default: ""
  UserPoolClientId:
    Type: String
    Description: "Specify the ID of an existing user pool client to use that one instead of creating a new one. If specified, then UserPoolArn must also be specified. Note: new callback URL's will be added to the pre-existing user pool client"
    Default: ""
  S3Bucket:
    Type: String
    Description: "Specify the name of S3 bucket. This is used as a domain \"<name>.s3.amazonaws.com\"."
    Default: ""
  Version:
    Type: String
    Description: "Use for development: putting in a new version forces redeployment of Lambda@Edge functions"
    Default: ""
  LogLevel:
    Type: String
    Description: "Use for development: setting to a value other than none turns on logging at that level. Warning! This will log sensitive data, use for development only"
    Default: "none"
    AllowedValues:
      - "none"
      - "info"
      - "warn"
      - "error"
      - "debug"

Conditions:
  UpdateUserPoolClient:
    !Not [!Equals [!Join ["", !Ref AlternateDomainNames], ""]]

Globals:
  Function:
    Timeout: 60

Resources:
  CheckAuthHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-edge/check-auth/
      Handler: bundle.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaEdgeExecutionRole.Arn
      Timeout: 5

  ParseAuthHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-edge/parse-auth/
      Handler: bundle.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaEdgeExecutionRole.Arn
      Timeout: 5

  RefreshAuthHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-edge/refresh-auth/
      Handler: bundle.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaEdgeExecutionRole.Arn
      Timeout: 5

  HttpHeadersHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-edge/http-headers/
      Handler: bundle.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaEdgeExecutionRole.Arn
      Timeout: 5

  SignOutHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda-edge/sign-out/
      Handler: bundle.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaEdgeExecutionRole.Arn
      Timeout: 5

  LambdaEdgeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - PathPattern: !Ref RedirectPathSignIn
            Compress: true
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt ParseAuthHandlerCodeUpdate.FunctionArn
            TargetOriginId: dummy-origin
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: !Ref RedirectPathAuthRefresh
            Compress: true
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt RefreshAuthHandlerCodeUpdate.FunctionArn
            TargetOriginId: dummy-origin
            ViewerProtocolPolicy: redirect-to-https
          - PathPattern: !Ref SignOutUrl
            Compress: true
            ForwardedValues:
              QueryString: true
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: !GetAtt SignOutHandlerCodeUpdate.FunctionArn
            TargetOriginId: dummy-origin
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: true
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !GetAtt CheckAuthHandlerCodeUpdate.FunctionArn
            - EventType: origin-response
              LambdaFunctionARN: !GetAtt HttpHeadersHandlerCodeUpdate.FunctionArn
          TargetOriginId: protected-bucket
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Sub "${S3Bucket}.s3.amazonaws.com"
            Id: protected-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - DomainName: will-never-be-reached.org
            Id: dummy-origin
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        CustomErrorResponses:
          - !Ref AWS::NoValue

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "CloudFront OAI"

  UserPoolDomainLookup:
    Type: Custom::UserPoolDomainLookup
    Properties:
      ServiceToken: !GetAtt UserPoolDomainLookupHandler.Arn
      UserPoolArn: !Ref UserPoolArn

  UserPoolDomainLookupHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cfn-custom-resources/user-pool-domain/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPool
              Resource: !Ref UserPoolArn

  UserPoolClientUpdate:
    Type: Custom::UserPoolClientUpdate
    Condition: UpdateUserPoolClient
    Properties:
      ServiceToken: !GetAtt UserPoolClientUpdateHandler.Arn
      UserPoolArn: !Ref UserPoolArn
      UserPoolClientId: !Ref UserPoolClientId
      CloudFrontDistributionDomainName: !GetAtt CloudFrontDistribution.DomainName
      RedirectPathSignIn: !Ref RedirectPathSignIn
      RedirectPathSignOut: !Ref RedirectPathSignOut
      AlternateDomainNames: !Ref AlternateDomainNames
      OAuthScopes: !Ref OAuthScopes

  UserPoolClientUpdateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cfn-custom-resources/user-pool-client/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:UpdateUserPoolClient
                - cognito-idp:DescribeUserPoolClient
              Resource: "*"  # * to be able to clean up after myself, if you change the User Pool Client ID

  ClientSecretRetrieval:
    Type: Custom::ClientSecretRetrieval
    Properties:
      ServiceToken: !GetAtt ClientSecretRetrievalHandler.Arn
      UserPoolArn: !Ref UserPoolArn
      UserPoolClientId: !Ref UserPoolClientId

  ClientSecretRetrievalHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cfn-custom-resources/client-secret-retrieval/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPoolClient
              Resource: !Ref UserPoolArn

  ParseAuthHandlerCodeUpdate:
    Type: Custom::LambdaCodeUpdate
    Properties:
      ServiceToken: !GetAtt LambdaCodeUpdateHandler.Arn
      LambdaFunction: !GetAtt ParseAuthHandler.Arn
      Version: !Ref Version
      Configuration:
        Fn::Sub:
          - >
            {
              "userPoolArn": "${UserPoolArn}",
              "clientId": "${ClientId}",
              "clientSecret": "${ClientSecret}",
              "oauthScopes": ${OAuthScopesJsonArray},
              "cognitoAuthDomain": "${UserPoolDomainLookup}",
              "redirectPathSignIn": "${RedirectPathSignIn}",
              "redirectPathSignOut": "${RedirectPathSignOut}",
              "redirectPathAuthRefresh": "${RedirectPathAuthRefresh}",
              "cookieSettings": ${CookieSettings},
              "mode": "${Mode}",
              "httpHeaders": ${HttpHeaders},
              "logLevel": "${LogLevel}",
              "nonceSigningSecret": "${NonceSigningSecret}",
              "cookieCompatibility": "${CookieCompatibility}",
              "additionalCookies": ${AdditionalCookies}
            }
          - Mode: "staticSiteMode"
            ClientSecret: !GetAtt ClientSecretRetrieval.ClientSecret
            UserPoolArn: !Ref UserPoolArn
            ClientId: !Ref UserPoolClientId
            OAuthScopesJsonArray: !Join
              - ""
              - - '["'
                - !Join
                  - '", "'
                  - !Ref OAuthScopes
                - '"]'

  CheckAuthHandlerCodeUpdate:
    Type: Custom::LambdaCodeUpdate
    Properties:
      ServiceToken: !GetAtt LambdaCodeUpdateHandler.Arn
      LambdaFunction: !GetAtt CheckAuthHandler.Arn
      Version: !Ref Version
      Configuration:
        Fn::Sub:
          - >
            {
              "userPoolArn": "${UserPoolArn}",
              "clientId": "${ClientId}",
              "clientSecret": "${ClientSecret}",
              "oauthScopes": ${OAuthScopesJsonArray},
              "cognitoAuthDomain": "${UserPoolDomainLookup}",
              "redirectPathSignIn": "${RedirectPathSignIn}",
              "redirectPathSignOut": "${RedirectPathSignOut}",
              "redirectPathAuthRefresh": "${RedirectPathAuthRefresh}",
              "cookieSettings": ${CookieSettings},
              "mode": "${Mode}",
              "httpHeaders": ${HttpHeaders},
              "logLevel": "${LogLevel}",
              "nonceSigningSecret": "${NonceSigningSecret}",
              "cookieCompatibility": "${CookieCompatibility}",
              "additionalCookies": ${AdditionalCookies}
            }
          - Mode: "staticSiteMode"
            ClientSecret: !GetAtt ClientSecretRetrieval.ClientSecret
            UserPoolArn: !Ref UserPoolArn
            ClientId: !Ref UserPoolClientId
            OAuthScopesJsonArray: !Join
              - ""
              - - '["'
                - !Join
                  - '", "'
                  - !Ref OAuthScopes
                - '"]'

  HttpHeadersHandlerCodeUpdate:
    Type: Custom::LambdaCodeUpdate
    Properties:
      ServiceToken: !GetAtt LambdaCodeUpdateHandler.Arn
      LambdaFunction: !GetAtt HttpHeadersHandler.Arn
      Version: !Ref Version
      Configuration:
        Fn::Sub: >
          {
            "httpHeaders": ${HttpHeaders},
            "logLevel": "${LogLevel}"
          }

  RefreshAuthHandlerCodeUpdate:
    Type: Custom::LambdaCodeUpdate
    Properties:
      ServiceToken: !GetAtt LambdaCodeUpdateHandler.Arn
      LambdaFunction: !GetAtt RefreshAuthHandler.Arn
      Version: !Ref Version
      Configuration:
        Fn::Sub:
          - >
            {
              "userPoolArn": "${UserPoolArn}",
              "clientId": "${ClientId}",
              "clientSecret": "${ClientSecret}",
              "oauthScopes": ${OAuthScopesJsonArray},
              "cognitoAuthDomain": "${UserPoolDomainLookup}",
              "redirectPathSignIn": "${RedirectPathSignIn}",
              "redirectPathSignOut": "${RedirectPathSignOut}",
              "redirectPathAuthRefresh": "${RedirectPathAuthRefresh}",
              "cookieSettings": ${CookieSettings},
              "mode": "${Mode}",
              "httpHeaders": ${HttpHeaders},
              "logLevel": "${LogLevel}",
              "nonceSigningSecret": "${NonceSigningSecret}",
              "cookieCompatibility": "${CookieCompatibility}",
              "additionalCookies": ${AdditionalCookies}
            }
          - Mode: "staticSiteMode"
            ClientSecret: !GetAtt ClientSecretRetrieval.ClientSecret
            UserPoolArn: !Ref UserPoolArn
            ClientId: !Ref UserPoolClientId
            OAuthScopesJsonArray: !Join
              - ""
              - - '["'
                - !Join
                  - '", "'
                  - !Ref OAuthScopes
                - '"]'

  SignOutHandlerCodeUpdate:
    Type: Custom::LambdaCodeUpdate
    Properties:
      ServiceToken: !GetAtt LambdaCodeUpdateHandler.Arn
      LambdaFunction: !GetAtt SignOutHandler.Arn
      Version: !Ref Version
      Configuration:
        Fn::Sub:
          - >
            {
              "userPoolArn": "${UserPoolArn}",
              "clientId": "${ClientId}",
              "clientSecret": "${ClientSecret}",
              "oauthScopes": ${OAuthScopesJsonArray},
              "cognitoAuthDomain": "${UserPoolDomainLookup}",
              "redirectPathSignIn": "${RedirectPathSignIn}",
              "redirectPathSignOut": "${RedirectPathSignOut}",
              "redirectPathAuthRefresh": "${RedirectPathAuthRefresh}",
              "cookieSettings": ${CookieSettings},
              "mode": "${Mode}",
              "httpHeaders": ${HttpHeaders},
              "logLevel": "${LogLevel}",
              "nonceSigningSecret": "${NonceSigningSecret}",
              "cookieCompatibility": "${CookieCompatibility}",
              "additionalCookies": ${AdditionalCookies}
            }
          - Mode: "staticSiteMode"
            ClientSecret: !GetAtt ClientSecretRetrieval.ClientSecret
            UserPoolArn: !Ref UserPoolArn
            ClientId: !Ref UserPoolClientId
            OAuthScopesJsonArray: !Join
              - ""
              - - '["'
                - !Join
                  - '", "'
                  - !Ref OAuthScopes
                - '"]'

  LambdaCodeUpdateHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cfn-custom-resources/lambda-code-update/
      Handler: index.handler
      Runtime: nodejs12.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:GetFunction
                - lambda:UpdateFunctionCode
              Resource:
                - !GetAtt ParseAuthHandler.Arn
                - !GetAtt CheckAuthHandler.Arn
                - !GetAtt HttpHeadersHandler.Arn
                - !GetAtt RefreshAuthHandler.Arn
                - !GetAtt SignOutHandler.Arn

  NonceSigningSecret:
    Type: Custom::NonceSigningSecret
    Properties:
      ServiceToken: !GetAtt RandomValueGenerator.Arn
      Length: 16
      Version: !Ref Version

  RandomValueGenerator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cfn-custom-resources/generate-secret/
      Handler: index.handler
      Runtime: nodejs12.x

Outputs:
  S3Bucket:
    Description: The S3 Bucket where the SPA (React, Angular, Vue, ...) is uploaded to
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"
  WebsiteUrl:
    Description: URL of the CloudFront distribution that serves your SPA from S3
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-WebsiteUrl"
  CloudFrontDistribution:
    Description: ID of the CloudFront distribution that serves your SPA from S3
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDistribution"
  ClientSecret:
    Description: The client secret associated with the User Pool Client.
    Value: !GetAtt ClientSecretRetrieval.ClientSecret
    Export:
      Name: !Sub "${AWS::StackName}-ClientSecret"
  RedirectUrisSignIn:
    Description: The URI(s) that will handle the redirect from Cognito after successfull sign-in
    Condition: UpdateUserPoolClient
    Value: !GetAtt UserPoolClientUpdate.RedirectUrisSignIn
    Export:
      Name: !Sub "${AWS::StackName}-RedirectUrisSignIn"
  RedirectUrisSignOut:
    Description: The URI(s) that will handle the redirect from Cognito after successfull sign-out
    Condition: UpdateUserPoolClient
    Value: !GetAtt UserPoolClientUpdate.RedirectUrisSignOut
    Export:
      Name: !Sub "${AWS::StackName}-RedirectUrisSignOut"
  ParseAuthHandler:
    Description: The Lambda function ARN to use in Lambda@Edge for parsing the URL of the redirect from the Cognito hosted UI after succesful sign-in
    Value: !GetAtt ParseAuthHandlerCodeUpdate.FunctionArn
    Export:
      Name: !Sub "${AWS::StackName}-ParseAuthHandler"
  CheckAuthHandler:
    Description: The Lambda function ARN to use in Lambda@Edge for checking the presence of a valid JWT
    Value: !GetAtt CheckAuthHandlerCodeUpdate.FunctionArn
    Export:
      Name: !Sub "${AWS::StackName}-CheckAuthHandler"
  HttpHeadersHandler:
    Description: The Lambda function ARN to use in Lambda@Edge for setting HTTP security headers
    Value: !GetAtt HttpHeadersHandlerCodeUpdate.FunctionArn
    Export:
      Name: !Sub "${AWS::StackName}-HttpHeadersHandler"
  RefreshAuthHandler:
    Description: The Lambda function ARN to use in Lambda@Edge for getting new JWT's using the refresh token
    Value: !GetAtt RefreshAuthHandlerCodeUpdate.FunctionArn
    Export:
      Name: !Sub "${AWS::StackName}-RefreshAuthHandler"
  SignOutHandler:
    Description: The Lambda function ARN to use in Lambda@Edge for signing out
    Value: !GetAtt SignOutHandlerCodeUpdate.FunctionArn
    Export:
      Name: !Sub "${AWS::StackName}-SignOutHandler"
  CodeUpdateHandler:
    Description: The Lambda function ARN of the custom resource that adds configuration to a function and publishes a version for use as Lambda@Edge
    Value: !GetAtt LambdaCodeUpdateHandler.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodeUpdateHandler"
  UserPoolClientUpdateHandler:
    Description: The Lambda function ARN of the custom resource that updates the user pool client with the right redirect URI's for sign-in and sign-out
    Value: !GetAtt UserPoolClientUpdateHandler.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientUpdateHandler"
